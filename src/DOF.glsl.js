export default "@export car.dof.coc\nuniform sampler2D depth;\nuniform float zNear = 0.1;\nuniform float zFar = 2000;\nuniform float focalDistance = 10;\nuniform float focalLength = 50;\nuniform float aperture = 5.6;\nuniform float maxCoc;\nuniform float _filmHeight = 0.024;\nvarying vec2 v_Texcoord;\n@import clay.util.encode_float\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n float f = focalLength / 1000.0;\n float s1 = max(f, focalDistance);\n float coeff = f * f / (aperture * (s1 - f) * _filmHeight * 2.0);\n float coc = (dist - focalDistance) * coeff / max(dist, 1e-5);\n coc /= maxCoc;\n gl_FragColor = vec4(clamp(coc * 0.5 + 0.5, 0.0, 1.0), 0.0, 0.0, 1.0);\n}\n@end\n@export car.dof.composite\n#define DEBUG 0\nuniform sampler2D sharp;\nuniform sampler2D blur;\nuniform sampler2D cocTex;\nuniform float maxCoc;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\n@import clay.util.float\nvoid main()\n{\n float coc = texture2D(cocTex, v_Texcoord).r * 2.0 - 1.0;\n vec4 blurTexel = decodeHDR(texture2D(blur, v_Texcoord));\n vec4 sharpTexel = decodeHDR(texture2D(sharp, v_Texcoord));\n float nfa = blurTexel.a;\n blurTexel.a = 1.0;\n float ffa = smoothstep(0.0, 0.2, coc);\n gl_FragColor = mix(sharpTexel, blurTexel, ffa + nfa - ffa * nfa);\n}\n@end\n@export car.dof.extraBlur\nuniform sampler2D cocTex;\nuniform sampler2D blur;\nuniform vec2 textureSize;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n vec2 kernel[9];\n kernel[0] = vec2(0.0, 0.0);\n kernel[1] = vec2(-0.9745327951958312, 0.21867486523537);\n kernel[2] = vec2(0.3777025447567271, 0.9202783758545757);\n kernel[3] = vec2(0.902187310588039, -0.3483859389475743);\n kernel[4] = vec2(-0.30698572999585466, -0.9297615216865224);\n kernel[5] = vec2(-0.5044353449794678, 0.799706031619336);\n kernel[6] = vec2(0.42218664766829966, -0.8913520930728434);\n kernel[7] = vec2(0.9206341562564012, 0.3586614465551363);\n kernel[8] = vec2(-0.7527561502723913, -0.4015851235140097);\n vec4 color = vec4(0.0);\n float w = 0.0;\n for (int i = 0; i < 9; i++) {\n vec2 uv = v_Texcoord + kernel[i] / textureSize;\n float coc = abs(texture2D(cocTex, uv).r * 2.0 - 1.0);\n vec4 texel = texture2D(blur, uv);\n color += texel * coc;\n w += coc;\n }\n gl_FragColor = color / max(w, 0.0001);\n}\n@end\n@export car.dof.maxCoc\nuniform sampler2D cocTex;\nuniform vec2 textureSize;\nvarying vec2 v_Texcoord;\nfloat tap(vec2 off) {\n return texture2D(cocTex, v_Texcoord + off).r * 2.0 - 1.0;\n}\nvoid main()\n{\n vec2 texelSize = 1.0 / textureSize;\n vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) * texelSize.xyxy;\n float coc = tap(vec2(0.0));\n float lt = tap(d.xy);\n float rt = tap(d.zy);\n float lb = tap(d.xw);\n float rb = tap(d.zw);\n coc = abs(lt) > abs(coc) ? lt : coc;\n coc = abs(rt) > abs(coc) ? rt : coc;\n coc = abs(lb) > abs(coc) ? lb : coc;\n coc = abs(rb) > abs(coc) ? rb : coc;\n gl_FragColor = vec4(coc * 0.5 + 0.5, 0.0,0.0,1.0);\n}\n@end\n@export car.dof.diskBlur\n#define POISSON_KERNEL_SIZE 16;\nuniform sampler2D mainTex;\nuniform sampler2D cocTex;\nuniform float maxCoc;\nuniform vec2 textureSize;\nuniform vec2 poissonKernel[POISSON_KERNEL_SIZE];\nuniform float jitter;\nvarying vec2 v_Texcoord;\nfloat nrand(const in vec2 n) {\n return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n@import clay.util.rgbm\n@import clay.util.float\nvoid main()\n{\n vec2 texelSize = 1.0 / textureSize;\n vec2 offset = vec2(maxCoc * texelSize.x / texelSize.y, maxCoc);\n float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * jitter);\n float cosa = cos(rnd);\n float sina = sin(rnd);\n vec4 basis = vec4(cosa, -sina, sina, cosa);\n vec4 fgColor = vec4(0.0);\n vec4 bgColor = vec4(0.0);\n float weightFg = 0.0;\n float weightBg = 0.0;\n float coc0 = texture2D(cocTex, v_Texcoord).r * 2.0 - 1.0;\n coc0 *= maxCoc;\n float margin = texelSize.y * 2.0;\n for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n vec2 duv = poissonKernel[i];\n duv = vec2(dot(duv, basis.xy), dot(duv, basis.zw));\n duv = offset * duv;\n float dist = length(duv);\n vec2 uv = clamp(v_Texcoord + duv, vec2(0.0), vec2(1.0));\n vec4 texel = decodeHDR(texture2D(mainTex, uv));\n float coc = texture2D(cocTex, uv).r * 2.0 - 1.0;\n coc *= maxCoc;\n float bgCoc = max(min(coc0, coc), 0.0);\n float bgw = clamp((bgCoc - dist + margin) / margin, 0.0, 1.0);\n float fgw = clamp((-coc - dist + margin) / margin, 0.0, 1.0);\n fgw *= step(texelSize.y, -coc);\n bgColor += bgw * texel;\n fgColor += fgw * texel;\n weightFg += fgw;\n weightBg += bgw;\n }\n fgColor /= max(weightFg, 0.0001);\n bgColor /= max(weightBg, 0.0001);\n weightFg = clamp(weightFg * 3.1415 / float(POISSON_KERNEL_SIZE), 0.0, 1.0);\n gl_FragColor = encodeHDR(mix(bgColor, fgColor, weightFg));\n float alpha = clamp(gl_FragColor.a, 0.0, 1.0);\n alpha = floor(alpha * 255.0);\n gl_FragColor.a = weightFg;\n}\n@end";
