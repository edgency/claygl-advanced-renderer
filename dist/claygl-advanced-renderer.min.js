!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("claygl")):"function"==typeof define&&define.amd?define(["claygl"],t):e.ClayAdvancedRenderer=t(e.clay)}(this,function(e){"use strict";function t(e,t){for(var r=0,n=1/t,o=e;o>0;)r+=n*(o%t),o=Math.floor(o/t),n/=t;return r}function r(t){for(var r=new Uint8Array(t*t*4),n=0,o=new e.Vector3,i=0;i<t;i++)for(var a=0;a<t;a++)o.set(2*Math.random()-1,2*Math.random()-1,0).normalize(),r[n++]=255*(.5*o.x+.5),r[n++]=255*(.5*o.y+.5),r[n++]=0,r[n++]=255;return r}function n(t){return new e.Texture2D({pixels:r(t),wrapS:e.Texture.REPEAT,wrapT:e.Texture.REPEAT,width:t,height:t})}function o(e,r,n){var o=new Float32Array(3*e);r=r||0;for(var i=0;i<e;i++){var a=t(i+r,2)*(n?1:2)*Math.PI,s=t(i+r,3)*Math.PI,c=Math.random(),l=Math.cos(a)*Math.sin(s)*c,u=Math.cos(s)*c,p=Math.sin(a)*Math.sin(s)*c;o[3*i]=l,o[3*i+1]=u,o[3*i+2]=p}return o}function i(t){t=t||{},this._ssaoPass=new v({fragment:e.Shader.source("car.ssao.estimate")}),this._blendPass=new v({fragment:e.Shader.source("car.temporalBlend")}),this._blurPass=new v({fragment:e.Shader.source("car.ssao.blur")}),this._framebuffer=new e.FrameBuffer,this._ssaoTexture=new e.Texture2D,this._prevTexture=new e.Texture2D,this._currTexture=new e.Texture2D,this._blurTexture=new e.Texture2D,this._depthTex=t.depthTexture,this._normalTex=t.normalTexture,this._velocityTex=t.velocityTexture,this.setNoiseSize(4),this.setKernelSize(t.kernelSize||12),null!=t.radius&&this.setParameter("radius",t.radius),null!=t.power&&this.setParameter("power",t.power),this._normalTex||(this._ssaoPass.material.disableTexture("normalTex"),this._blurPass.material.disableTexture("normalTex")),this._depthTex||this._blurPass.material.disableTexture("depthTex"),this._blurPass.material.setUniform("normalTex",this._normalTex),this._blurPass.material.setUniform("depthTex",this._depthTex)}function a(t){t=t||{},this._ssrPass=new g({fragment:e.Shader.source("car.ssr.main"),clearColor:[0,0,0,0]}),this._blurPass1=new g({fragment:e.Shader.source("car.ssr.blur"),clearColor:[0,0,0,0]}),this._blurPass2=new g({fragment:e.Shader.source("car.ssr.blur"),clearColor:[0,0,0,0]}),this._blendPass=new g({fragment:e.Shader.source("clay.compositor.blend")}),this._blendPass.material.disableTexturesAll(),this._blendPass.material.enableTexture(["texture1","texture2"]),this._ssrPass.setUniform("gBufferTexture1",t.normalTexture),this._ssrPass.setUniform("gBufferTexture2",t.depthTexture),this._ssrPass.setUniform("gBufferTexture3",t.albedoTexture),this._blurPass1.setUniform("gBufferTexture1",t.normalTexture),this._blurPass1.setUniform("gBufferTexture2",t.depthTexture),this._blurPass2.setUniform("gBufferTexture1",t.normalTexture),this._blurPass2.setUniform("gBufferTexture2",t.depthTexture),this._blurPass2.material.define("fragment","VERTICAL"),this._blurPass2.material.define("fragment","BLEND"),this._ssrTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._texture2=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._texture3=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._prevTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._currentTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._frameBuffer=new e.FrameBuffer({depthBuffer:!1}),this._normalDistribution=null,this._totalSamples=256,this._samplePerFrame=4,this._ssrPass.material.define("fragment","SAMPLE_PER_FRAME",this._samplePerFrame),this._ssrPass.material.define("fragment","TOTAL_SAMPLES",this._totalSamples),this._downScale=1}function s(){this._sourceTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._depthTexture=new e.Texture2D({format:e.Texture.DEPTH_COMPONENT,type:e.Texture.UNSIGNED_INT}),this._framebuffer=new e.FrameBuffer,this._framebuffer.attach(this._sourceTexture),this._framebuffer.attach(this._depthTexture,e.FrameBuffer.DEPTH_ATTACHMENT),this._gBufferPass=new S({renderTransparent:!0,enableTargetTexture3:!1,enableTargetTexture4:!0}),this._compositor=e.createCompositor(y);var t=this._compositor.getNodeByName("source");t.texture=this._sourceTexture;var r=this._compositor.getNodeByName("coc");this._sourceNode=t,this._cocNode=r,this._compositeNode=this._compositor.getNodeByName("composite"),this._fxaaNode=this._compositor.getNodeByName("FXAA"),this._dofBlurNodes=["dof_far_blur","dof_near_blur","dof_coc_blur"].map(function(e){return this._compositor.getNodeByName(e)},this),this._dofBlurKernel=null,this._dofBlurKernelSize=new Float32Array(0),this._finalNodesChain=w.map(function(e){return this._compositor.getNodeByName(e)},this);var n={normalTexture:this._gBufferPass.getTargetTexture1(),depthTexture:this._gBufferPass.getTargetTexture2(),albedoTexture:this._gBufferPass.getTargetTexture3(),velocityTexture:this._gBufferPass.getTargetTexture4()};this._ssaoPass=new i(n),this._ssrPass=new a(n)}function c(r){r=r||{};for(var n=[],o=0;o<30;o++)n.push([t(o,2),t(o,3)]);this._haltonSequence=n,this._frame=0,this._sourceTex=new e.Texture2D,this._sourceFb=new e.FrameBuffer,this._sourceFb.attach(this._sourceTex),this._prevFrameTex=new e.Texture2D,this._outputTex=new e.Texture2D;var i=this._taaPass=new D({fragment:e.Shader.source("car.taa")});i.setUniform("velocityTex",r.velocityTexture),i.setUniform("depthTex",r.depthTexture),this._depthTex=r.depthTexture,this._taaFb=new e.FrameBuffer({depthBuffer:!1}),this._outputPass=new D({fragment:e.Shader.source("clay.compositor.output"),blendWithPrevious:!0}),this._outputPass.material.define("fragment","OUTPUT_ALPHA"),this._outputPass.material.blend=function(e){e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)}}function l(e,t,r){this.renderer=e,this.scene=t,this.preZ=!1,this._compositor=new s,this._temporalSS=new c({velocityTexture:this._compositor.getVelocityTexture(),depthTexture:this._compositor.getDepthTexture()}),r&&(this._shadowMapPass=new A({lightFrustumBias:20})),this._enableTemporalSS="auto",t.on("beforerender",function(e,t,r){this.needsTemporalSS()&&this._temporalSS.jitterProjection(e,r)},this)}function u(e){if(null==e||"object"!=typeof e)return e;var t=e,r=z.call(e);if("[object Array]"===r){if(!_(e)){t=[];for(var n=0,o=e.length;n<o;n++)t[n]=u(e[n])}}else if(C[r]){if(!_(e)){var i=e.constructor;if(e.constructor.from)t=i.from(e);else{t=new i(e.length);for(var n=0,o=e.length;n<o;n++)t[n]=u(e[n])}}}else if(!N[r]&&!_(e)&&!m(e)){t={};for(var a in e)e.hasOwnProperty(a)&&(t[a]=u(e[a]))}return t}function p(e,t,r){if(!h(t)||!h(e))return r?u(t):e;for(var n in t)if(t.hasOwnProperty(n)){var o=e[n],i=t[n];!h(i)||!h(o)||d(i)||d(o)||m(i)||m(o)||f(i)||f(o)||_(i)||_(o)?!r&&n in e||(e[n]=u(t[n],!0)):p(o,i,r)}return e}function d(e){return"[object Array]"===z.call(e)}function h(e){var t=typeof e;return"function"===t||!!e&&"object"==t}function f(e){return!!N[z.call(e)]}function m(e){return"object"==typeof e&&"number"==typeof e.nodeType&&"object"==typeof e.ownerDocument}function _(e){return e[L]}function x(e,t,r,n){n=p({},n),"boolean"==typeof n.shadow&&(n.shadow={enable:n.shadow}),n=p(n,F),this._renderMain=new l(e,t,n.shadow),this._renderMain.setShadow(n.shadow),this._renderMain.setPostEffect(n.postEffect),this._needsRefresh=!1,this._graphicOpts=n,r.on("frame",this._loop,this)}var v=e.compositor.Pass;e.Shader.import("@export car.ssao.estimate\n#define SHADER_NAME SSAO\nuniform sampler2D depthTex;\nuniform sampler2D normalTex;\nuniform sampler2D noiseTex;\nuniform vec2 depthTexSize;\nuniform vec2 noiseTexSize;\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 viewInverseTranspose;\nuniform vec3 kernel[KERNEL_SIZE];\nuniform float radius : 1;\nuniform float power : 1;\nuniform float bias: 0.01;\nuniform float intensity: 1.0;\nvarying vec2 v_Texcoord;\nfloat ssaoEstimator(in vec3 originPos, in vec3 N, in mat3 kernelBasis) {\n float occlusion = 0.0;\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec3 samplePos = kernel[i];\n#ifdef NORMALTEX_ENABLED\n samplePos = kernelBasis * samplePos;\n#endif\n samplePos = samplePos * radius + originPos;\n vec4 texCoord = projection * vec4(samplePos, 1.0);\n texCoord.xy /= texCoord.w;\n texCoord.xy = texCoord.xy * 0.5 + 0.5;\n vec4 depthTexel = texture2D(depthTex, texCoord.xy);\n float z = depthTexel.r * 2.0 - 1.0;\n#ifdef ALCHEMY\n vec4 projectedPos = vec4(texCoord.xy * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n p4.xyz /= p4.w;\n vec3 cDir = p4.xyz - originPos;\n float vv = dot(cDir, cDir);\n float vn = dot(cDir, N);\n float radius2 = radius * radius;\n vn = max(vn + p4.z * bias, 0.0);\n float f = max(radius2 - vv, 0.0) / radius2;\n occlusion += f * f * f * max(vn / (0.01 + vv), 0.0);\n#else\n if (projection[3][3] == 0.0) {\n z = projection[3][2] / (z * projection[2][3] - projection[2][2]);\n }\n else {\n z = (z - projection[3][2]) / projection[2][2];\n }\n float factor = step(samplePos.z, z - bias);\n float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - z));\n occlusion += rangeCheck * factor;\n#endif\n }\n#ifdef NORMALTEX_ENABLED\n occlusion = 1.0 - occlusion / float(KERNEL_SIZE);\n#else\n occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n#endif\n return pow(occlusion, power);\n}\nvoid main()\n{\n vec4 depthTexel = texture2D(depthTex, v_Texcoord);\n#ifdef NORMALTEX_ENABLED\n vec4 tex = texture2D(normalTex, v_Texcoord);\n if (dot(tex.rgb, tex.rgb) == 0.0) {\n gl_FragColor = vec4(1.0);\n return;\n }\n vec3 N = tex.rgb * 2.0 - 1.0;\n N = (viewInverseTranspose * vec4(N, 0.0)).xyz;\n vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * v_Texcoord;\n vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n vec3 T = normalize(rvec - N * dot(rvec, N));\n vec3 BT = normalize(cross(N, T));\n mat3 kernelBasis = mat3(T, BT, N);\n#else\n if (depthTexel.r > 0.99999) {\n gl_FragColor = vec4(1.0);\n return;\n }\n mat3 kernelBasis;\n#endif\n float z = depthTexel.r * 2.0 - 1.0;\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n vec3 position = p4.xyz / p4.w;\n float ao = ssaoEstimator(position, N, kernelBasis);\n ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);\n gl_FragColor = vec4(vec3(ao), 1.0);\n}\n@end\n@export car.ssao.blur\n#define SHADER_NAME SSAO_BLUR\nuniform sampler2D ssaoTexture;\n#ifdef NORMALTEX_ENABLED\nuniform sampler2D normalTex;\n#endif\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\nuniform int direction: 0.0;\n#ifdef DEPTHTEX_ENABLED\nuniform sampler2D depthTex;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(depthTex, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n#endif\nvoid main()\n{\n float kernel[5];\n kernel[0] = 0.122581;\n kernel[1] = 0.233062;\n kernel[2] = 0.288713;\n kernel[3] = 0.233062;\n kernel[4] = 0.122581;\n vec2 off = vec2(0.0);\n if (direction == 0) {\n off[0] = blurSize / textureSize.x;\n }\n else {\n off[1] = blurSize / textureSize.y;\n }\n vec2 coord = v_Texcoord;\n float sum = 0.0;\n float weightAll = 0.0;\n#ifdef NORMALTEX_ENABLED\n vec3 centerNormal = texture2D(normalTex, v_Texcoord).rgb * 2.0 - 1.0;\n#endif\n#if defined(DEPTHTEX_ENABLED)\n float centerDepth = getLinearDepth(v_Texcoord);\n#endif\n for (int i = 0; i < 5; i++) {\n vec2 coord = clamp(v_Texcoord + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));\n float w = kernel[i];\n#ifdef NORMALTEX_ENABLED\n vec3 normal = texture2D(normalTex, coord).rgb * 2.0 - 1.0;\n w *= clamp(dot(normal, centerNormal), 0.0, 1.0);\n#endif\n#ifdef DEPTHTEX_ENABLED\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(centerDepth - d) / depthRange, 0.0, 1.0));\n#endif\n weightAll += w;\n sum += texture2D(ssaoTexture, coord).r * w;\n }\n gl_FragColor = vec4(vec3(sum / weightAll), 1.0);\n}\n@end\n"),i.prototype.setDepthTexture=function(e){this._depthTex=e},i.prototype.setNormalTexture=function(e){this._normalTex=e,this._ssaoPass.material[e?"enableTexture":"disableTexture"]("normalTex"),this.setKernelSize(this._kernelSize)},i.prototype.update=function(t,r,n){var o=t.getWidth(),i=t.getHeight(),a=this._ssaoPass,s=this._blurPass;this._blendPass;a.setUniform("kernel",this._kernels[n%this._kernels.length]),a.setUniform("depthTex",this._depthTex),null!=this._normalTex&&a.setUniform("normalTex",this._normalTex),a.setUniform("depthTexSize",[this._depthTex.width,this._depthTex.height]);var c=new e.Matrix4;e.Matrix4.transpose(c,r.worldTransform),a.setUniform("projection",r.projectionMatrix.array),a.setUniform("projectionInv",r.invProjectionMatrix.array),a.setUniform("viewInverseTranspose",c.array);var l=this._ssaoTexture,u=this._blurTexture,p=this._prevTexture,d=this._currTexture;l.width=o,l.height=i,u.width=o,u.height=i,p.width=o,p.height=i,d.width=o,d.height=i,this._framebuffer.attach(l),this._framebuffer.bind(t),t.gl.clearColor(1,1,1,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),a.render(t),s.setUniform("textureSize",[o,i]),s.setUniform("projection",r.projectionMatrix.array),this._framebuffer.attach(u),s.setUniform("direction",0),s.setUniform("ssaoTexture",l),s.render(t),this._framebuffer.attach(l),s.setUniform("direction",1),s.setUniform("ssaoTexture",u),s.render(t),this._framebuffer.unbind(t);var h=t.clearColor;t.gl.clearColor(h[0],h[1],h[2],h[3])},i.prototype.getTargetTexture=function(){return this._ssaoTexture},i.prototype.setParameter=function(e,t){"noiseTexSize"===e?this.setNoiseSize(t):"kernelSize"===e?this.setKernelSize(t):"intensity"===e?this._ssaoPass.material.set("intensity",t):this._ssaoPass.setUniform(e,t)},i.prototype.setKernelSize=function(e){this._kernelSize=e,this._ssaoPass.material.define("fragment","KERNEL_SIZE",e),this._kernels=this._kernels||[];for(var t=0;t<30;t++)this._kernels[t]=o(e,t*e,!!this._normalTex)},i.prototype.setNoiseSize=function(e){var t=this._ssaoPass.getUniform("noiseTex");t?(t.data=r(e),t.width=t.height=e,t.dirty()):(t=n(e),this._ssaoPass.setUniform("noiseTex",n(e))),this._ssaoPass.setUniform("noiseTexSize",[e,e])},i.prototype.dispose=function(e){this._blurTexture.dispose(e),this._ssaoTexture.dispose(e)},i.prototype.isFinished=function(e){return e>30};var g=e.compositor.Pass,b=e.util.cubemap;e.Shader.import("@export car.ssr.main\n#define SHADER_NAME SSR\n#define MAX_ITERATION 20;\n#define SAMPLE_PER_FRAME 5;\n#define TOTAL_SAMPLES 128;\nuniform sampler2D sourceTexture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform sampler2D gBufferTexture3;\nuniform samplerCube specularCubemap;\nuniform sampler2D brdfLookup;\nuniform float specularIntensity: 1;\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 toViewSpace;\nuniform mat4 toWorldSpace;\nuniform float maxRayDistance: 200;\nuniform float pixelStride: 16;\nuniform float pixelStrideZCutoff: 50;\nuniform float screenEdgeFadeStart: 0.9;\nuniform float eyeFadeStart : 0.2;uniform float eyeFadeEnd: 0.8;\nuniform float minGlossiness: 0.2;uniform float zThicknessThreshold: 1;\nuniform float nearZ;\nuniform vec2 viewportSize : VIEWPORT_SIZE;\nuniform float jitterOffset: 0;\nvarying vec2 v_Texcoord;\n#ifdef DEPTH_DECODE\n@import clay.util.decode_float\n#endif\n#ifdef PHYSICALLY_CORRECT\nuniform sampler2D normalDistribution;\nuniform float sampleOffset: 0;\nuniform vec2 normalDistributionSize;\nvec3 transformNormal(vec3 H, vec3 N) {\n vec3 upVector = N.y > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvec3 importanceSampleNormalGGX(float i, float roughness, vec3 N) {\n float p = fract((i + sampleOffset) / float(TOTAL_SAMPLES));\n vec3 H = texture2D(normalDistribution,vec2(roughness, p)).rgb;\n return transformNormal(H, N);\n}\nfloat G_Smith(float g, float ndv, float ndl) {\n float roughness = 1.0 - g;\n float k = roughness * roughness / 2.0;\n float G1V = ndv / (ndv * (1.0 - k) + k);\n float G1L = ndl / (ndl * (1.0 - k) + k);\n return G1L * G1V;\n}\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n#endif\nfloat fetchDepth(sampler2D depthTexture, vec2 uv)\n{\n vec4 depthTexel = texture2D(depthTexture, uv);\n return depthTexel.r * 2.0 - 1.0;\n}\nfloat linearDepth(float depth)\n{\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\nbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel)\n{\n if (rayZFar > rayZNear)\n {\n float t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n }\n float cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n return rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n}\nbool traceScreenSpaceRay(\n vec3 rayOrigin, vec3 rayDir, float jitter,\n out vec2 hitPixel, out vec3 hitPoint, out float iterationCount\n)\n{\n float rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ)\n ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n vec3 rayEnd = rayOrigin + rayDir * rayLength;\n vec4 H0 = projection * vec4(rayOrigin, 1.0);\n vec4 H1 = projection * vec4(rayEnd, 1.0);\n float k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n vec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n P1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n vec2 delta = P1 - P0;\n bool permute = false;\n if (abs(delta.x) < abs(delta.y)) {\n permute = true;\n delta = delta.yx;\n P0 = P0.yx;\n P1 = P1.yx;\n }\n float stepDir = sign(delta.x);\n float invdx = stepDir / delta.x;\n vec3 dQ = (Q1 - Q0) * invdx;\n float dk = (k1 - k0) * invdx;\n vec2 dP = vec2(stepDir, delta.y * invdx);\n float strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n float pixStride = 1.0 + strideScaler * pixelStride;\n dP *= pixStride; dQ *= pixStride; dk *= pixStride;\n vec4 pqk = vec4(P0, Q0.z, k0);\n vec4 dPQK = vec4(dP, dQ.z, dk);\n pqk += dPQK * jitter;\n float rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n float rayZNear;\n bool intersect = false;\n vec2 texelSize = 1.0 / viewportSize;\n iterationCount = 0.0;\n for (int i = 0; i < MAX_ITERATION; i++)\n {\n pqk += dPQK;\n rayZNear = rayZFar;\n rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n hitPixel = permute ? pqk.yx : pqk.xy;\n hitPixel *= texelSize;\n intersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n iterationCount += 1.0;\n dPQK *= 1.2;\n if (intersect) {\n break;\n }\n }\n Q0.xy += dQ.xy * iterationCount;\n Q0.z = pqk.z;\n hitPoint = Q0 / pqk.w;\n return intersect;\n}\nfloat calculateAlpha(\n float iterationCount, float reflectivity,\n vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir\n)\n{\n float alpha = clamp(reflectivity, 0.0, 1.0);\n alpha *= 1.0 - (iterationCount / float(MAX_ITERATION));\n vec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n float maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n alpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n float _eyeFadeStart = eyeFadeStart;\n float _eyeFadeEnd = eyeFadeEnd;\n if (_eyeFadeStart > _eyeFadeEnd) {\n float tmp = _eyeFadeEnd;\n _eyeFadeEnd = _eyeFadeStart;\n _eyeFadeStart = tmp;\n }\n float eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n alpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n alpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n return alpha;\n}\n@import clay.util.rand\n@import clay.util.rgbm\nvoid main()\n{\n vec4 normalAndGloss = texture2D(gBufferTexture1, v_Texcoord);\n if (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n discard;\n }\n float g = normalAndGloss.a;\n#if !defined(PHYSICALLY_CORRECT)\n if (g <= minGlossiness) {\n discard;\n }\n#endif\n float reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n vec3 N = normalize(normalAndGloss.rgb * 2.0 - 1.0);\n N = normalize((toViewSpace * vec4(N, 0.0)).xyz);\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, fetchDepth(gBufferTexture2, v_Texcoord), 1.0);\n vec4 pos = projectionInv * projectedPos;\n vec3 rayOrigin = pos.xyz / pos.w;\n vec3 V = -normalize(rayOrigin);\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n float iterationCount;\n float jitter = rand(fract(v_Texcoord + jitterOffset));\n vec4 albedoMetalness = texture2D(gBufferTexture3, v_Texcoord);\n vec3 albedo = albedoMetalness.rgb;\n float m = albedoMetalness.a;\n vec3 diffuseColor = albedo * (1.0 - m);\n vec3 spec = mix(vec3(0.04), albedo, m);\n#ifdef PHYSICALLY_CORRECT\n vec4 color = vec4(vec3(0.0), 1.0);\n float jitter2 = rand(fract(v_Texcoord)) * float(TOTAL_SAMPLES);\n for (int i = 0; i < SAMPLE_PER_FRAME; i++) {\n vec3 H = importanceSampleNormalGGX(float(i) + jitter2, 1.0 - g, N);\n vec3 rayDir = normalize(reflect(-V, H));\n#else\n vec3 rayDir = normalize(reflect(-V, N));\n#endif\n vec2 hitPixel;\n vec3 hitPoint;\n bool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n float dist = distance(rayOrigin, hitPoint);\n vec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n hitNormal = normalize((toViewSpace * vec4(hitNormal, 0.0)).xyz);\n#ifdef PHYSICALLY_CORRECT\n float ndl = clamp(dot(N, rayDir), 0.0, 1.0);\n float vdh = clamp(dot(V, H), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n vec3 litTexel = vec3(0.0);\n if (dot(hitNormal, rayDir) < 0.0 && intersect) {\n litTexel = texture2D(sourceTexture, hitPixel).rgb;\n litTexel *= pow(clamp(1.0 - dist / 200.0, 0.0, 1.0), 3.0);\n }\n else {\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n litTexel = RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, 0.0), 8.12).rgb * specularIntensity;\n#endif\n }\n color.rgb += ndl * litTexel * (\n F_Schlick(ndl, spec) * G_Smith(g, ndv, ndl) * vdh / (ndh * ndv + 0.001)\n );\n }\n color.rgb /= float(SAMPLE_PER_FRAME);\n#else\n#if !defined(SPECULARCUBEMAP_ENABLED)\n if (dot(hitNormal, rayDir) >= 0.0) {\n discard;\n }\n if (!intersect) {\n discard;\n }\n#endif\n float alpha = clamp(calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir), 0.0, 1.0);\n vec4 color = texture2D(sourceTexture, hitPixel);\n color.rgb *= alpha;\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n alpha = alpha * (intersect ? 1.0 : 0.0);\n float bias = (1.0 - g) * 5.0;\n vec2 brdfParam2 = texture2D(brdfLookup, vec2(1.0 - g, ndv)).xy;\n color.rgb += (1.0 - alpha)\n * RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, bias), 8.12).rgb\n * (spec * brdfParam2.x + brdfParam2.y)\n * specularIntensity;\n#endif\n#endif\n gl_FragColor = encodeHDR(color);\n}\n@end\n@export car.ssr.blur\nuniform sampler2D texture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n#ifdef BLEND\n #ifdef SSAOTEX_ENABLED\nuniform sampler2D ssaoTex;\n #endif\nuniform sampler2D sourceTexture;\n#endif\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(gBufferTexture2, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n@import clay.util.rgbm\nvoid main()\n{\n @import clay.compositor.kernel.gaussian_9\n vec4 centerNTexel = texture2D(gBufferTexture1, v_Texcoord);\n float g = centerNTexel.a;\n float maxBlurSize = clamp(1.0 - g, 0.0, 1.0) * blurSize;\n#ifdef VERTICAL\n vec2 off = vec2(0.0, maxBlurSize / textureSize.y);\n#else\n vec2 off = vec2(maxBlurSize / textureSize.x, 0.0);\n#endif\n vec2 coord = v_Texcoord;\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n vec3 cN = centerNTexel.rgb * 2.0 - 1.0;\n float cD = getLinearDepth(v_Texcoord);\n for (int i = 0; i < 9; i++) {\n vec2 coord = clamp((float(i) - 4.0) * off + v_Texcoord, vec2(0.0), vec2(1.0));\n float w = gaussianKernel[i]\n * clamp(dot(cN, texture2D(gBufferTexture1, coord).rgb * 2.0 - 1.0), 0.0, 1.0);\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(cD - d) / depthRange, 0.0, 1.0));\n weightAll += w;\n sum += decodeHDR(texture2D(texture, coord)) * w;\n }\n#ifdef BLEND\n float aoFactor = 1.0;\n #ifdef SSAOTEX_ENABLED\n aoFactor = texture2D(ssaoTex, v_Texcoord).r;\n #endif\n gl_FragColor = encodeHDR(\n sum / weightAll * aoFactor + decodeHDR(texture2D(sourceTexture, v_Texcoord))\n );\n#else\n gl_FragColor = encodeHDR(sum / weightAll);\n#endif\n}\n@end"),a.prototype.setAmbientCubemap=function(e,t,r){this._ssrPass.material.set("specularCubemap",e),this._ssrPass.material.set("brdfLookup",t),this._ssrPass.material.set("specularIntensity",r);var n=e&&r;this._ssrPass.material[n?"enableTexture":"disableTexture"]("specularCubemap")},a.prototype.update=function(t,r,n,o){var i=t.getWidth(),a=t.getHeight(),s=this._ssrTexture,c=this._texture2,l=this._texture3;s.width=this._prevTexture.width=this._currentTexture.width=i/this._downScale,s.height=this._prevTexture.height=this._currentTexture.height=a/this._downScale,c.width=l.width=i,c.height=l.height=a;var u=this._frameBuffer,p=this._ssrPass,d=this._blurPass1,h=this._blurPass2,f=this._blendPass,m=new e.Matrix4,_=new e.Matrix4;e.Matrix4.transpose(m,r.worldTransform),e.Matrix4.transpose(_,r.viewMatrix),p.setUniform("sourceTexture",n),p.setUniform("projection",r.projectionMatrix.array),p.setUniform("projectionInv",r.invProjectionMatrix.array),p.setUniform("toViewSpace",m.array),p.setUniform("toWorldSpace",_.array),p.setUniform("nearZ",r.near);var x=o/this._totalSamples*this._samplePerFrame;if(p.setUniform("jitterOffset",x),p.setUniform("sampleOffset",o*this._samplePerFrame),d.setUniform("textureSize",[s.width,s.height]),h.setUniform("textureSize",[i,a]),h.setUniform("sourceTexture",n),d.setUniform("projection",r.projectionMatrix.array),h.setUniform("projection",r.projectionMatrix.array),u.attach(s),u.bind(t),p.render(t),this._physicallyCorrect&&(u.attach(this._currentTexture),f.setUniform("texture1",this._prevTexture),f.setUniform("texture2",s),f.material.set({weight1:o>=1?.95:0,weight2:o>=1?.05:1}),f.render(t)),u.attach(c),d.setUniform("texture",this._physicallyCorrect?this._currentTexture:s),d.render(t),u.attach(l),h.setUniform("texture",c),h.render(t),u.unbind(t),this._physicallyCorrect){var v=this._prevTexture;this._prevTexture=this._currentTexture,this._currentTexture=v}},a.prototype.getTargetTexture=function(){return this._texture3},a.prototype.setParameter=function(e,t){"maxIteration"===e?this._ssrPass.material.define("fragment","MAX_ITERATION",t):this._ssrPass.setUniform(e,t)},a.prototype.setPhysicallyCorrect=function(e){e?(this._normalDistribution||(this._normalDistribution=b.generateNormalDistribution(64,this._totalSamples)),this._ssrPass.material.define("fragment","PHYSICALLY_CORRECT"),this._ssrPass.material.set("normalDistribution",this._normalDistribution),this._ssrPass.material.set("normalDistributionSize",[64,this._totalSamples])):this._ssrPass.material.undefine("fragment","PHYSICALLY_CORRECT"),this._physicallyCorrect=e},a.prototype.setSSAOTexture=function(e){var t=this._blurPass2;e?(t.material.enableTexture("ssaoTex"),t.material.set("ssaoTex",e)):t.material.disableTexture("ssaoTex")},a.prototype.isFinished=function(e){return!this._physicallyCorrect||e>this._totalSamples/this._samplePerFrame},a.prototype.dispose=function(e){this._ssrTexture.dispose(e),this._texture2.dispose(e),this._texture3.dispose(e),this._prevTexture.dispose(e),this._currentTexture.dispose(e),this._frameBuffer.dispose(e)};var T=[0,0,-.321585265978,-.154972575841,.458126042375,.188473391593,.842080129861,.527766490688,.147304551086,-.659453822776,-.331943915203,-.940619700594,.0479226680259,.54812163202,.701581552186,-.709825561388,-.295436780218,.940589268233,-.901489676764,.237713156085,.973570876096,-.109899459384,-.866792314779,-.451805525005,.330975007087,.800048655954,-.344275183665,.381779221166,-.386139432542,-.437418421534,-.576478634965,-.0148463392551,.385798197415,-.262426961053,-.666302061145,.682427250835,-.628010632582,-.732836215494,.10163141741,-.987658134403,.711995289051,-.320024291314,.0296005138058,.950296523438,.0130612307608,-.351024443122,-.879596633704,-.10478487883,.435712737232,.504254490347,.779203817497,.206477676721,.388264289969,-.896736162545,-.153106280781,-.629203242522,-.245517550697,.657969239148,.126830499058,.26862328493,-.634888119007,-.302301223431,.617074219636,.779817204925],y={type:"compositor",nodes:[{name:"source",type:"texture",outputs:{color:{}}},{name:"source_half",shader:"#source(clay.compositor.downsample)",inputs:{texture:"source"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"bright",shader:"#source(clay.compositor.bright)",inputs:{texture:"source_half"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{threshold:2,scale:4,textureSize:"expr([width * 1.0 / 2, height / 2])"}},{name:"bright_downsample_4",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 2, height / 2] )"}},{name:"bright_downsample_8",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 4, height / 4] )"}},{name:"bright_downsample_16",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 8, height / 8] )"}},{name:"bright_downsample_32",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 32)",height:"expr(height * 1.0 / 32)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 16, height / 16] )"}},{name:"bright_upsample_16_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_32"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 32, height / 32] )"}},{name:"bright_upsample_16_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_16_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 32, height * 1.0 / 32] )"}},{name:"bright_upsample_8_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_8_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_8_blur_v",texture2:"bright_upsample_16_blur_v"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_4_blur_h",
shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_4_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_4_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_4_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_4_blur_v",texture2:"bright_upsample_8_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_2_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_2_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_2_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_2_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_2_blur_v",texture2:"bright_upsample_4_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_full_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bright_upsample_full_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_full_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bloom_composite",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_full_blur_v",texture2:"bright_upsample_2_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"coc",shader:"#source(car.dof.coc)",outputs:{color:{parameters:{minFilter:"NEAREST",magFilter:"NEAREST",width:"expr(width * 1.0)",height:"expr(height * 1.0)"}}},parameters:{focalDist:50,focalRange:30}},{name:"dof_far_blur",shader:"#source(car.dof.diskBlur)",inputs:{texture:"source",coc:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"dof_near_blur",shader:"#source(car.dof.diskBlur)",inputs:{texture:"source",coc:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"},defines:{BLUR_NEARFIELD:null}},{name:"dof_coc_blur",shader:"#source(car.dof.diskBlur)",inputs:{texture:"coc"},outputs:{color:{parameters:{minFilter:"NEAREST",magFilter:"NEAREST",width:"expr(width * 1.0)",height:"expr(height * 1.0)"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"},defines:{BLUR_COC:null}},{name:"dof_composite",shader:"#source(car.dof.composite)",inputs:{original:"source",blurred:"dof_far_blur",nearfield:"dof_near_blur",coc:"coc",nearcoc:"dof_coc_blur"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}}},{name:"composite",shader:"#source(clay.compositor.hdr.composite)",inputs:{texture:"source",bloom:"bloom_composite"},defines:{}},{name:"FXAA",shader:"#source(clay.compositor.fxaa)",inputs:{texture:"composite"}}]},S=e.deferred.GBuffer;e.Shader.import("@export car.dof.coc\nuniform sampler2D depth;\nuniform float zNear: 0.1;\nuniform float zFar: 2000;\nuniform float focalDistance: 3;\nuniform float focalRange: 1;\nuniform float focalLength: 30;\nuniform float fstop: 2.8;\nvarying vec2 v_Texcoord;\n@import clay.util.encode_float\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n float aperture = focalLength / fstop;\n float coc;\n float uppper = focalDistance + focalRange;\n float lower = focalDistance - focalRange;\n if (dist <= uppper && dist >= lower) {\n coc = 0.5;\n }\n else {\n float focalAdjusted = dist > uppper ? uppper : lower;\n coc = abs(aperture * (focalLength * (dist - focalAdjusted)) / (dist * (focalAdjusted - focalLength)));\n coc = clamp(coc, 0.0, 2.0) / 2.00001;\n if (dist < lower) {\n coc = -coc;\n }\n coc = coc * 0.5 + 0.5;\n }\n gl_FragColor = encodeFloat(coc);\n}\n@end\n@export car.dof.composite\n#define DEBUG 0\nuniform sampler2D original;\nuniform sampler2D blurred;\nuniform sampler2D nearfield;\nuniform sampler2D coc;\nuniform sampler2D nearcoc;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\n@import clay.util.float\nvoid main()\n{\n vec4 blurredColor = decodeHDR(texture2D(blurred, v_Texcoord));\n vec4 originalColor = decodeHDR(texture2D(original, v_Texcoord));\n float fCoc = decodeFloat(texture2D(coc, v_Texcoord));\n fCoc = abs(fCoc * 2.0 - 1.0);\n float weight = smoothstep(0.0, 1.0, fCoc);\n#ifdef NEARFIELD_ENABLED\n vec4 nearfieldColor = decodeHDR(texture2D(nearfield, v_Texcoord));\n float fNearCoc = decodeFloat(texture2D(nearcoc, v_Texcoord));\n fNearCoc = abs(fNearCoc * 2.0 - 1.0);\n gl_FragColor = encodeHDR(\n mix(\n nearfieldColor, mix(originalColor, blurredColor, weight),\n pow(1.0 - fNearCoc, 4.0)\n )\n );\n#else\n gl_FragColor = encodeHDR(mix(originalColor, blurredColor, weight));\n#endif\n}\n@end\n@export car.dof.diskBlur\n#define POISSON_KERNEL_SIZE 16;\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\nuniform float blurRadius : 10.0;\nuniform vec2 textureSize : [512.0, 512.0];\nuniform vec2 poissonKernel[POISSON_KERNEL_SIZE];\nuniform float percent;\nfloat nrand(const in vec2 n) {\n return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n@import clay.util.rgbm\n@import clay.util.float\nvoid main()\n{\n vec2 offset = blurRadius / textureSize;\n float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * percent );\n float cosa = cos(rnd);\n float sina = sin(rnd);\n vec4 basis = vec4(cosa, -sina, sina, cosa);\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n#ifdef BLUR_COC\n float cocSum = 0.0;\n#else\n vec4 color = vec4(0.0);\n#endif\n float weightSum = 0.0;\n for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n vec2 ofs = poissonKernel[i];\n ofs = vec2(dot(ofs, basis.xy), dot(ofs, basis.zw));\n vec2 uv = v_Texcoord + ofs * offset;\n vec4 texel = texture2D(texture, uv);\n float w = 1.0;\n#ifdef BLUR_COC\n float fCoc = decodeFloat(texel) * 2.0 - 1.0;\n cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n texel = decodeHDR(texel);\n #if !defined(BLUR_NEARFIELD)\n float fCoc = decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0;\n w *= abs(fCoc);\n #endif\n color += texel * w;\n#endif\n weightSum += w;\n }\n#ifdef BLUR_COC\n gl_FragColor = encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n color /= weightSum;\n gl_FragColor = encodeHDR(color);\n#endif\n}\n@end"),e.Shader.import("@export car.temporalBlend\nuniform sampler2D prevTex;\nuniform sampler2D currTex;\nuniform sampler2D velocityTex;\nvarying vec2 v_Texcoord;\nvoid main() {\n vec4 vel = texture2D(velocityTex, v_Texcoord);\n vec4 curr = texture2D(currTex, v_Texcoord);\n vec4 prev = texture2D(prevTex, v_Texcoord - vel.rg);\n if (length(vel.rg) > 0.1 || vel.a < 0.01) {\n gl_FragColor = curr;\n }\n else {\n gl_FragColor = mix(prev, curr, 0.1);\n }\n}\n@end");var P={color:{parameters:{width:function(e){return e.getWidth()},height:function(e){return e.getHeight()}}}},w=["composite","FXAA"];s.prototype.resize=function(e,t,r){r=r||1,e*=r,t*=r;var n=this._sourceTexture,o=this._depthTexture;n.width=e,n.height=t,o.width=e,o.height=t,this._gBufferPass.resize(e,t)},s.prototype._ifRenderNormalPass=function(){return this._enableSSAO||this._enableEdge||this._enableSSR},s.prototype._getPrevNode=function(e){for(var t=w.indexOf(e.name)-1,r=this._finalNodesChain[t];r&&!this._compositor.getNodeByName(r.name);)t-=1,r=this._finalNodesChain[t];return r},s.prototype._getNextNode=function(e){for(var t=w.indexOf(e.name)+1,r=this._finalNodesChain[t];r&&!this._compositor.getNodeByName(r.name);)t+=1,r=this._finalNodesChain[t];return r},s.prototype._addChainNode=function(e){var t=this._getPrevNode(e),r=this._getNextNode(e);t&&(t.outputs=P,e.inputs.texture=t.name,r?(e.outputs=P,r.inputs.texture=e.name):e.outputs=null,this._compositor.addNode(e))},s.prototype._removeChainNode=function(e){var t=this._getPrevNode(e),r=this._getNextNode(e);t&&(r?(t.outputs=P,r.inputs.texture=t.name):t.outputs=null,this._compositor.removeNode(e))},s.prototype.updateGBuffer=function(e,t,r,n){this._ifRenderNormalPass()&&this._gBufferPass.update(e,t,r)},s.prototype.updateSSAO=function(e,t,r,n){this._ssaoPass.update(e,r,n)},s.prototype.enableSSAO=function(){this._enableSSAO=!0},s.prototype.disableSSAO=function(){this._enableSSAO=!1},s.prototype.enableSSR=function(){this._enableSSR=!0,this._gBufferPass.enableTargetTexture3=!0},s.prototype.disableSSR=function(){this._enableSSR=!1,this._gBufferPass.enableTargetTexture3=!1},s.prototype.getSSAOTexture=function(){return this._ssaoPass.getTargetTexture()},s.prototype.getSourceFrameBuffer=function(){return this._framebuffer},s.prototype.getSourceTexture=function(){return this._sourceTexture},s.prototype.getVelocityTexture=function(){return this._gBufferPass.getTargetTexture4()},s.prototype.getDepthTexture=function(){return this._gBufferPass.getTargetTexture2()},s.prototype.disableFXAA=function(){this._removeChainNode(this._fxaaNode)},s.prototype.enableFXAA=function(){this._addChainNode(this._fxaaNode)},s.prototype.enableBloom=function(){this._compositeNode.inputs.bloom="bloom_composite",this._compositor.dirty()},s.prototype.disableBloom=function(){this._compositeNode.inputs.bloom=null,this._compositor.dirty()},s.prototype.enableDOF=function(){this._compositeNode.inputs.texture="dof_composite",this._compositor.dirty()},s.prototype.disableDOF=function(){this._compositeNode.inputs.texture="source",this._compositor.dirty()},s.prototype.enableColorCorrection=function(){this._compositeNode.define("COLOR_CORRECTION"),this._enableColorCorrection=!0},s.prototype.disableColorCorrection=function(){this._compositeNode.undefine("COLOR_CORRECTION"),this._enableColorCorrection=!1},s.prototype.enableEdge=function(){this._enableEdge=!0},s.prototype.disableEdge=function(){this._enableEdge=!1},s.prototype.setBloomIntensity=function(e){null!=e&&this._compositeNode.setParameter("bloomIntensity",e)},s.prototype.setSSAOParameter=function(e,t){if(null!=t)switch(e){case"quality":var r={low:6,medium:12,high:32,ultra:62}[t]||12;this._ssaoPass.setParameter("kernelSize",r);break;case"radius":this._ssaoPass.setParameter(e,t),this._ssaoPass.setParameter("bias",t/50);break;case"intensity":this._ssaoPass.setParameter(e,t)}},s.prototype.setDOFParameter=function(e,t){if(null!=t)switch(e){case"focalDistance":case"focalRange":case"fstop":this._cocNode.setParameter(e,t);break;case"blurRadius":for(var r=0;r<this._dofBlurNodes.length;r++)this._dofBlurNodes[r].setParameter("blurRadius",t);break;case"quality":var n={low:4,medium:8,high:16,ultra:32}[t]||8;this._dofBlurKernelSize=n;for(var r=0;r<this._dofBlurNodes.length;r++)this._dofBlurNodes[r].define("POISSON_KERNEL_SIZE",n);this._dofBlurKernel=new Float32Array(2*n)}},s.prototype.setSSRParameter=function(e,t){if(null!=t)switch(e){case"quality":var r={low:10,medium:15,high:30,ultra:80}[t]||20,n={low:32,medium:16,high:8,ultra:4}[t]||16;this._ssrPass.setParameter("maxIteration",r),this._ssrPass.setParameter("pixelStride",n);break;case"maxRoughness":this._ssrPass.setParameter("minGlossiness",Math.max(Math.min(1-t,1),0));break;case"physical":this.setPhysicallyCorrectSSR(t);break;default:console.warn("Unkown SSR parameter "+e)}},s.prototype.setPhysicallyCorrectSSR=function(e){this._ssrPass.setPhysicallyCorrect(e)},s.prototype.setEdgeColor=function(e){},s.prototype.setExposure=function(e){null!=e&&this._compositeNode.setParameter("exposure",Math.pow(2,e))},s.prototype.setColorLookupTexture=function(e,t){},s.prototype.setColorCorrection=function(e,t){this._compositeNode.setParameter(e,t)},s.prototype.composite=function(e,t,r,n,o){var i=this._sourceTexture,a=i;if(this._enableSSR){this._ssrPass.update(e,r,i,o),a=this._ssrPass.getTargetTexture(),this._ssrPass.setSSAOTexture(this._enableSSAO?this._ssaoPass.getTargetTexture():null);for(var s=t.getLights(),c=0;c<s.length;c++)s[c].cubemap&&this._ssrPass.setAmbientCubemap(s[c].cubemap,s[c]._brdfLookup,s[c].intensity)}this._sourceNode.texture=a,this._cocNode.setParameter("depth",this._depthTexture);for(var l=this._dofBlurKernel,u=this._dofBlurKernelSize,p=Math.floor(T.length/2/u),d=o%p,c=0;c<2*u;c++)l[c]=T[c+d*u*2];for(var c=0;c<this._dofBlurNodes.length;c++)this._dofBlurNodes[c].setParameter("percent",o/30),this._dofBlurNodes[c].setParameter("poissonKernel",l);this._cocNode.setParameter("zNear",r.near),this._cocNode.setParameter("zFar",r.far),this._compositor.render(e,n)},s.prototype.isSSRFinished=function(e){return!this._ssrPass||this._ssrPass.isFinished(e)},s.prototype.isSSAOFinished=function(e){return!this._ssaoPass||this._ssaoPass.isFinished(e)},s.prototype.isSSREnabled=function(){return this._enableSSR},s.prototype.dispose=function(e){this._sourceTexture.dispose(e),this._depthTexture.dispose(e),this._framebuffer.dispose(e),this._compositor.dispose(e),this._gBufferPass.dispose(e),this._ssaoPass.dispose(e)};var D=e.compositor.Pass;e.Shader.import("\n@export car.taa\n#define SHADER_NAME TAA\n#define FLT_EPS 0.00000001\n#define MINMAX_3X3\n#define USE_CLIPPING\n#define USE_DILATION\nuniform sampler2D prevTex;\nuniform sampler2D currTex;\nuniform sampler2D velocityTex;\nuniform sampler2D depthTex;\nuniform bool still;\nuniform float sinTime;\nuniform float motionScale;\nuniform float feedbackMin: 0.88;\nuniform float feedbackMax: 0.97;\nuniform mat4 projection;\nuniform vec2 texelSize;\nuniform vec2 depthTexelSize;\nvarying vec2 v_Texcoord;\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\nfloat depth_resolve_linear(float depth) {\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\nvec3 find_closest_fragment_3x3(vec2 uv)\n{\n\tvec2 dd = abs(depthTexelSize.xy);\n\tvec2 du = vec2(dd.x, 0.0);\n\tvec2 dv = vec2(0.0, dd.y);\n\tvec3 dtl = vec3(-1, -1, texture2D(depthTex, uv - dv - du).x);\n\tvec3 dtc = vec3( 0, -1, texture2D(depthTex, uv - dv).x);\n\tvec3 dtr = vec3( 1, -1, texture2D(depthTex, uv - dv + du).x);\n\tvec3 dml = vec3(-1, 0, texture2D(depthTex, uv - du).x);\n\tvec3 dmc = vec3( 0, 0, texture2D(depthTex, uv).x);\n\tvec3 dmr = vec3( 1, 0, texture2D(depthTex, uv + du).x);\n\tvec3 dbl = vec3(-1, 1, texture2D(depthTex, uv + dv - du).x);\n\tvec3 dbc = vec3( 0, 1, texture2D(depthTex, uv + dv).x);\n\tvec3 dbr = vec3( 1, 1, texture2D(depthTex, uv + dv + du).x);\n\tvec3 dmin = dtl;\n\tif (dmin.z > dtc.z) dmin = dtc;\n\tif (dmin.z > dtr.z) dmin = dtr;\n\tif (dmin.z > dml.z) dmin = dml;\n\tif (dmin.z > dmc.z) dmin = dmc;\n\tif (dmin.z > dmr.z) dmin = dmr;\n\tif (dmin.z > dbl.z) dmin = dbl;\n\tif (dmin.z > dbc.z) dmin = dbc;\n\tif (dmin.z > dbr.z) dmin = dbr;\n\treturn vec3(uv + dd.xy * dmin.xy, dmin.z);\n}\nfloat PDnrand( vec2 n ) {\n\treturn fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453 );\n}\nvec2 PDnrand2( vec2 n ) {\n\treturn fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* vec2(43758.5453, 28001.8384) );\n}\nvec3 PDnrand3( vec2 n ) {\n\treturn fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* vec3(43758.5453, 28001.8384, 50849.4141 ) );\n}\nvec4 PDnrand4( vec2 n ) {\n\treturn fract( sin(dot(n.xy, vec2(12.9898, 78.233)))* vec4(43758.5453, 28001.8384, 50849.4141, 12996.89) );\n}\nfloat PDsrand( vec2 n ) {\n\treturn PDnrand( n ) * 2.0 - 1.0;\n}\nvec2 PDsrand2( vec2 n ) {\n\treturn PDnrand2( n ) * 2.0 - 1.0;\n}\nvec3 PDsrand3( vec2 n ) {\n\treturn PDnrand3( n ) * 2.0 - 1.0;\n}\nvec4 PDsrand4( vec2 n ) {\n\treturn PDnrand4( n ) * 2.0 - 1.0;\n}\nvec3 RGB_YCoCg(vec3 c)\n{\n return vec3(\n c.x/4.0 + c.y/2.0 + c.z/4.0,\n c.x/2.0 - c.z/2.0,\n -c.x/4.0 + c.y/2.0 - c.z/4.0\n );\n}\nvec3 YCoCg_RGB(vec3 c)\n{\n return clamp(vec3(\n c.x + c.y - c.z,\n c.x + c.z,\n c.x - c.y - c.z\n ), vec3(0.0), vec3(1.0));\n}\nvec4 sample_color(sampler2D tex, vec2 uv)\n{\n#ifdef USE_YCOCG\n vec4 c = texture2D(tex, uv);\n return vec4(RGB_YCoCg(c.rgb), c.a);\n#else\n return texture2D(tex, uv);\n#endif\n}\nvec4 resolve_color(vec4 c)\n{\n#ifdef USE_YCOCG\n return vec4(YCoCg_RGB(c.rgb).rgb, c.a);\n#else\n return c;\n#endif\n}\nvec4 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec4 p, vec4 q)\n{\n vec4 r = q - p;\n vec3 rmax = aabb_max - p.xyz;\n vec3 rmin = aabb_min - p.xyz;\n const float eps = FLT_EPS;\n if (r.x > rmax.x + eps)\n r *= (rmax.x / r.x);\n if (r.y > rmax.y + eps)\n r *= (rmax.y / r.y);\n if (r.z > rmax.z + eps)\n r *= (rmax.z / r.z);\n if (r.x < rmin.x - eps)\n r *= (rmin.x / r.x);\n if (r.y < rmin.y - eps)\n r *= (rmin.y / r.y);\n if (r.z < rmin.z - eps)\n r *= (rmin.z / r.z);\n return p + r;\n}\nvec4 sample_color_motion(sampler2D tex, vec2 uv, vec2 ss_vel)\n{\n vec2 v = 0.5 * ss_vel;\n float srand = PDsrand(uv + vec2(sinTime));\n vec2 vtap = v / 3.0;\n vec2 pos0 = uv + vtap * (0.5 * srand);\n vec4 accu = vec4(0.0);\n float wsum = 0.0;\n for (int i = -3; i <= 3; i++)\n {\n float w = 1.0; accu += w * sample_color(tex, pos0 + float(i) * vtap);\n wsum += w;\n }\n return accu / wsum;\n}\nvec4 temporal_reprojection(vec2 ss_txc, vec2 ss_vel, float vs_dist)\n{\n vec4 texel0 = sample_color(currTex, ss_txc);\n vec4 texel1 = sample_color(prevTex, ss_txc - ss_vel);\n vec2 uv = v_Texcoord;\n#if defined(MINMAX_3X3) || defined(MINMAX_3X3_ROUNDED)\n vec2 du = vec2(texelSize.x, 0.0);\n vec2 dv = vec2(0.0, texelSize.y);\n vec4 ctl = sample_color(currTex, uv - dv - du);\n vec4 ctc = sample_color(currTex, uv - dv);\n vec4 ctr = sample_color(currTex, uv - dv + du);\n vec4 cml = sample_color(currTex, uv - du);\n vec4 cmc = sample_color(currTex, uv);\n vec4 cmr = sample_color(currTex, uv + du);\n vec4 cbl = sample_color(currTex, uv + dv - du);\n vec4 cbc = sample_color(currTex, uv + dv);\n vec4 cbr = sample_color(currTex, uv + dv + du);\n vec4 cmin = min(ctl, min(ctc, min(ctr, min(cml, min(cmc, min(cmr, min(cbl, min(cbc, cbr))))))));\n vec4 cmax = max(ctl, max(ctc, max(ctr, max(cml, max(cmc, max(cmr, max(cbl, max(cbc, cbr))))))));\n #if defined(MINMAX_3X3_ROUNDED) || defined(USE_YCOCG) || defined(USE_CLIPPING)\n vec4 cavg = (ctl + ctc + ctr + cml + cmc + cmr + cbl + cbc + cbr) / 9.0;\n #endif\n #ifdef MINMAX_3X3_ROUNDED\n vec4 cmin5 = min(ctc, min(cml, min(cmc, min(cmr, cbc))));\n vec4 cmax5 = max(ctc, max(cml, max(cmc, max(cmr, cbc))));\n vec4 cavg5 = (ctc + cml + cmc + cmr + cbc) / 5.0;\n cmin = 0.5 * (cmin + cmin5);\n cmax = 0.5 * (cmax + cmax5);\n cavg = 0.5 * (cavg + cavg5);\n #endif\n#elif defined(MINMAX_4TAP_VARYING)\n const float _SubpixelThreshold = 0.5;\n const float _GatherBase = 0.5;\n const float _GatherSubpixelMotion = 0.1666;\n vec2 texel_vel = ss_vel / depthTexelSize.xy;\n float texel_vel_mag = length(texel_vel) * vs_dist;\n float k_subpixel_motion = saturate(_SubpixelThreshold / (FLT_EPS + texel_vel_mag));\n float k_min_max_support = _GatherBase + _GatherSubpixelMotion * k_subpixel_motion;\n vec2 ss_offset01 = k_min_max_support * vec2(-texelSize.x, texelSize.y);\n vec2 ss_offset11 = k_min_max_support * vec2(texelSize.x, texelSize.y);\n vec4 c00 = sample_color(currTex, uv - ss_offset11);\n vec4 c10 = sample_color(currTex, uv - ss_offset01);\n vec4 c01 = sample_color(currTex, uv + ss_offset01);\n vec4 c11 = sample_color(currTex, uv + ss_offset11);\n vec4 cmin = min(c00, min(c10, min(c01, c11)));\n vec4 cmax = max(c00, max(c10, max(c01, c11)));\n #ifdef USE_YCOCG || USE_CLIPPING\n vec4 cavg = (c00 + c10 + c01 + c11) / 4.0;\n #endif\n#endif\n#ifdef USE_YCOCG\n vec2 chroma_extent = vec2(0.25 * 0.5 * (cmax.r - cmin.r));\n vec2 chroma_center = texel0.gb;\n cmin.yz = chroma_center - chroma_extent;\n cmax.yz = chroma_center + chroma_extent;\n cavg.yz = chroma_center;\n#endif\n#ifdef USE_CLIPPING\n texel1 = clip_aabb(cmin.xyz, cmax.xyz, clamp(cavg, cmin, cmax), texel1);\n#else\n texel1 = clamp(texel1, cmin, cmax);\n#endif\n#ifdef USE_YCOCG\n float lum0 = texel0.r;\n float lum1 = texel1.r;\n#else\n float lum0 = dot(texel0.rgb, w);\n float lum1 = dot(texel1.rgb, w);\n#endif\n float unbiased_diff = abs(lum0 - lum1) / max(lum0, max(lum1, 0.2));\n float unbiased_weight = 1.0 - unbiased_diff;\n float unbiased_weight_sqr = unbiased_weight * unbiased_weight;\n float k_feedback = mix(feedbackMin, feedbackMax, unbiased_weight_sqr);\n return mix(texel0, texel1, k_feedback);\n}\nvoid main()\n{\n vec2 uv = v_Texcoord;\n if (still) {\n gl_FragColor = mix(texture2D(currTex, uv), texture2D(prevTex, uv), 0.9);\n return;\n }\n#ifdef USE_DILATION\n vec3 c_frag = find_closest_fragment_3x3(uv);\n vec2 ss_vel = texture2D(velocityTex, c_frag.xy).xy;\n float vs_dist = depth_resolve_linear(c_frag.z);\n#else\n vec2 ss_vel = texture2D(velocityTex, uv).xy;\n float vs_dist = depth_sample_linear(uv);\n#endif\n vec4 color_temporal = temporal_reprojection(v_Texcoord, ss_vel, vs_dist);\n vec4 to_buffer = resolve_color(color_temporal);\n vec4 noise4 = PDsrand4(v_Texcoord + sinTime + 0.6959174) / 510.0;\n gl_FragColor = clamp(to_buffer + noise4, vec4(0.0), vec4(1.0));\n}\n@end\n"),c.prototype={constructor:c,jitterProjection:function(t,r){var n=t.viewport,o=n.devicePixelRatio||t.getDevicePixelRatio(),i=n.width*o,a=n.height*o,s=this._haltonSequence[this._frame%this._haltonSequence.length],c=new e.Matrix4;c.array[12]=(2*s[0]-1)/i,c.array[13]=(2*s[1]-1)/a,e.Matrix4.mul(r.projectionMatrix,c,r.projectionMatrix),e.Matrix4.invert(r.invProjectionMatrix,r.projectionMatrix)},resetFrame:function(){this._frame=0},getFrame:function(){return this._frame},getSourceFrameBuffer:function(){return this._sourceFb},resize:function(e,t){this._sourceTex.width===e&&this._sourceTex.height===t||(this._prevFrameTex.width=e,this._prevFrameTex.height=t,this._outputTex.width=e,this._outputTex.height=t,this._sourceTex.width=e,this._sourceTex.height=t,this._prevFrameTex.dirty(),this._outputTex.dirty(),this._sourceTex.dirty())},isFinished:function(){return this._frame>=this._haltonSequence.length},render:function(e,t,r){var n=this._taaPass;n.setUniform("prevTex",this._prevFrameTex),n.setUniform("currTex",this._sourceTex),n.setUniform("texelSize",[1/this._sourceTex.width,1/this._sourceTex.width]),n.setUniform("depthTexelSize",[1/this._depthTex.width,1/this._depthTex.width]),n.setUniform("sinTime",Math.sin(+new Date/8)),n.setUniform("projection",t.projectionMatrix.array),n.setUniform("still",!!r),this._taaFb.attach(this._outputTex),this._taaFb.bind(e),n.render(e),this._taaFb.unbind(e),this._outputPass.setUniform("texture",this._outputTex),this._outputPass.render(e);var o=this._prevFrameTex;this._prevFrameTex=this._outputTex,this._outputTex=o,this._frame++},dispose:function(e){this._sourceFb.dispose(e),this._taaFb.dispose(e),this._prevFrameTex.dispose(e),this._outputTex.dispose(e),this._sourceTex.dispose(e),this._outputPass.dispose(e),this._taaPass.dispose(e)}};var A=e.prePass.ShadowMap,E=(e.camera.Perspective,new e.Vector2);l.prototype.castRay=function(e,t,r){var n=this.layer.renderer,o=n.viewport;return n.viewport=this.viewport,n.screenToNDC(e,t,E),this.camera.castRay(E,r),n.viewport=o,r},l.prototype.prepareRender=function(){var e=this.scene,t=e.getMainCamera(),r=this.renderer;t.aspect=r.getViewportAspect(),e.update(),e.updateLights();var n=e.updateRenderList(t);this._updateSRGBOfList(n.opaque),this._updateSRGBOfList(n.transparent),this._frame=0;for(var o=e.getLights(),i=0;i<o.length;i++)o[i].cubemap&&(this._compositor&&this._compositor.isSSREnabled()?o[i].invisible=!0:o[i].invisible=!1);this._enablePostEffect&&(this._compositor.resize(r.getWidth(),r.getHeight(),r.getDevicePixelRatio()),this._temporalSS.resize(r.getWidth(),r.getHeight()))},l.prototype.render=function(e){var t=this.scene,r=t.getMainCamera();this._doRender(t,r,e,this._frame),this._frame++},l.prototype.needsAccumulate=function(){return this.needsTemporalSS()||this._needsSortProgressively},l.prototype.needsTemporalSS=function(){var e=this._enableTemporalSS;return"auto"===e&&(e=this._enablePostEffect),e},l.prototype.hasDOF=function(){return this._enableDOF},l.prototype.isAccumulateFinished=function(){var e=this._frame;return!(this.needsTemporalSS()&&!this._temporalSS.isFinished(e)||this._compositor&&!this._compositor.isSSAOFinished(e)||this._compositor&&!this._compositor.isSSRFinished(e)||this._compositor&&e<30)},l.prototype._doRender=function(e,t,r,n){var o=this.renderer;n=n||0,!r&&this._shadowMapPass&&(this._shadowMapPass.kernelPCF=this._pcfKernels[0],this._shadowMapPass.render(o,e,t,!0)),this._updateShadowPCFKernel(e,t,n),o.gl.clearColor(0,0,0,0),this._enablePostEffect&&(this.needsTemporalSS()&&this._temporalSS.jitterProjection(o,t),this._compositor.updateGBuffer(o,e,t,this._temporalSS.getFrame())),this._updateSSAO(o,e,t,this._temporalSS.getFrame());var i;this._enablePostEffect?(i=this._compositor.getSourceFrameBuffer(),i.bind(o),o.gl.clear(o.gl.DEPTH_BUFFER_BIT|o.gl.COLOR_BUFFER_BIT),o.render(e,t,!0,this.preZ),this.afterRenderScene(o,e,t),i.unbind(o),this.needsTemporalSS()?(this._compositor.composite(o,e,t,this._temporalSS.getSourceFrameBuffer(),this._temporalSS.getFrame()),this._temporalSS.render(o,t,r)):this._compositor.composite(o,e,t,null,0)):this.needsTemporalSS()?(i=this._temporalSS.getSourceFrameBuffer(),i.bind(o),o.saveClear(),o.clearBit=o.gl.DEPTH_BUFFER_BIT|o.gl.COLOR_BUFFER_BIT,o.render(e,t,!0,this.preZ),this.afterRenderScene(o,e,t),o.restoreClear(),i.unbind(o),this._temporalSS.render(o,t,r)):(o.render(e,t,!0,this.preZ),this.afterRenderScene(o,e,t)),this.afterRenderAll(o,e,t)},l.prototype._updateSRGBOfList=function(e){for(var t=this.isLinearSpace(),r=0;r<e.length;r++)e[r].material[t?"define":"undefine"]("fragment","SRGB_DECODE")},l.prototype.afterRenderScene=function(e,t,r){},l.prototype.afterRenderAll=function(e,t,r){},l.prototype._updateSSAO=function(e,t,r,n){function o(e){for(var t=0;t<e.length;t++){var r=e[t];r.material[i?"enableTexture":"disableTexture"]("ssaoMap"),i&&r.material.set("ssaoMap",a.getSSAOTexture())}}var i=this._enableSSAO&&this._enablePostEffect,a=this._compositor;i&&this._compositor.updateSSAO(e,t,r,this._temporalSS.getFrame()),o(t.getRenderList(r).opaque),o(t.getRenderList(r).transparent)},l.prototype._updateShadowPCFKernel=function(e,t,r){function n(e){for(var t=0;t<e.length;t++)e[t].receiveShadow&&(e[t].material.set("pcfKernel",o),e[t].material&&e[t].material.define("fragment","PCF_KERNEL_SIZE",o.length/2))}var o=this._pcfKernels[r%this._pcfKernels.length];n(e.getRenderList(t).opaque),n(e.getRenderList(t).transparent)},l.prototype.dispose=function(){var e=this.renderer;this._compositor.dispose(e),this._temporalSS.dispose(e),this._shadowMapPass&&this._shadowMapPass.dispose(e),e.dispose()},l.prototype.setPostEffect=function(e,t){var r=this._compositor;e=e||{},this._enablePostEffect=!!e.enable;var n=e.bloom||{},o=e.edge||{},i=e.depthOfField||{},a=e.screenSpaceAmbientOcclusion||{},s=e.screenSpaceReflection||{},c=e.FXAA||{},l=e.colorCorrection||{};n.enable?r.enableBloom():r.disableBloom(),i.enable?r.enableDOF():r.disableDOF(),s.enable?r.enableSSR():r.disableSSR(),l.enable?r.enableColorCorrection():r.disableColorCorrection(),o.enable?r.enableEdge():r.disableEdge(),c.enable?r.enableFXAA():r.disableFXAA(),this._enableDOF=i.enable,this._enableSSAO=a.enable,this._enableSSAO?r.enableSSAO():r.disableSSAO(),r.setBloomIntensity(n.intensity),r.setEdgeColor(o.color),r.setColorLookupTexture(l.lookupTexture,t),r.setExposure(l.exposure),["radius","quality","intensity"].forEach(function(e){r.setSSAOParameter(e,a[e])}),["quality","maxRoughness","physical"].forEach(function(e){r.setSSRParameter(e,s[e])}),["quality","focalDistance","focalRange","blurRadius","fstop"].forEach(function(e){r.setDOFParameter(e,i[e])}),["brightness","contrast","saturation"].forEach(function(e){r.setColorCorrection(e,l[e])})},l.prototype.setShadow=function(e){for(var r=[],n=0,o=0;o<30;o++){for(var i=[],a=0;a<e.kernelSize;a++)i.push((2*t(n,2)-1)*e.blurSize),i.push((2*t(n,3)-1)*e.blurSize),n++;r.push(i)}this._pcfKernels=r},l.prototype.isDOFEnabled=function(){return this._enablePostEffect&&this._enableDOF},l.prototype.setDOFFocusOnPoint=function(e){if(this._enablePostEffect){if(e>this.camera.far||e<this.camera.near)return;return this._compositor.setDOFParameter("focalDistance",e),!0}},l.prototype.setTemporalSuperSampling=function(e){e=e||{},this._enableTemporalSS=e.enable},l.prototype.isLinearSpace=function(){return this._enablePostEffect};var F={shadow:{enable:!0,kernelSize:6,blurSize:2},postEffect:{enable:!0,bloom:{enable:!0,intensity:.1},depthOfField:{enable:!1,focalDistance:5,focalRange:1,blurRadius:5,fstop:2.8,quality:"medium"},screenSpaceAmbientOcclusion:{enable:!1,radius:.2,quality:"medium",intensity:1},screenSpaceReflection:{enable:!1,physical:!1,quality:"medium",maxRoughness:.8},colorCorrection:{enable:!0,exposure:0,brightness:0,contrast:1,saturation:1,lookupTexture:""},FXAA:{enable:!1}}},N={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1,"[object CanvasPattern]":1,"[object Image]":1,"[object Canvas]":1},C={"[object Int8Array]":1,"[object Uint8Array]":1,"[object Uint8ClampedArray]":1,"[object Int16Array]":1,"[object Uint16Array]":1,"[object Int32Array]":1,"[object Uint32Array]":1,"[object Float32Array]":1,"[object Float64Array]":1},z=Object.prototype.toString,L="__ec_primitive__";x.prototype.render=function(e){this._needsRefresh=!0},x.prototype.setPostEffect=function(e){p(this._graphicOpts.postEffect,e,!0),this._renderMain.setPostEffect(this._graphicOpts.postEffect)},x.prototype.setShadow=function(e){p(this._graphicOpts.shadow,e,!0),this._renderMain.setShadow(this._graphicOpts.shadow)},x.prototype._loop=function(e){this._disposed||this._needsRefresh&&(this._needsRefresh=!1,this._renderMain.prepareRender(),this._renderMain.render(),this._startAccumulating())};var R=1;return x.prototype._stopAccumulating=function(){this._accumulatingId=0,clearTimeout(this._accumulatingTimeout)},x.prototype._startAccumulating=function(e){function t(o){if(r._accumulatingId&&o===r._accumulatingId&&!r._disposed){r._renderMain.isAccumulateFinished()&&n||(r._renderMain.render(!0),e?t(o):requestAnimationFrame(function(){t(o)}))}}var r=this;this._stopAccumulating();var n=r._renderMain.needsAccumulate();n&&(this._accumulatingId=R++,e?t(r._accumulatingId):this._accumulatingTimeout=setTimeout(function(){t(r._accumulatingId)},50))},x.prototype.dispose=function(){this._disposed=!0,this._renderMain.dispose()},x.version="0.1.0",x});
